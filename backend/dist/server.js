/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 154:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var createError = __webpack_require__(/*! http-errors */ \"http-errors\");\n\nvar express = __webpack_require__(/*! express */ \"express\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\n\nvar logger = __webpack_require__(/*! morgan */ \"morgan\");\n\nvar debug = __webpack_require__(/*! debug */ \"debug\")('frontend:server');\n\nvar http = __webpack_require__(/*! http */ \"http\");\n\nvar webpack = __webpack_require__(/*! webpack */ \"webpack\");\n\nvar webpackDevMiddleware = __webpack_require__(/*! webpack-dev-middleware */ \"webpack-dev-middleware\");\n\nvar webpackHotMiddleware = __webpack_require__(/*! webpack-hot-middleware */ \"webpack-hot-middleware\");\n\nvar config = __webpack_require__(/*! ./webpack.config.js */ \"./webpack.config.js\");\n\nvar cors = __webpack_require__(/*! cors */ \"cors\");\n\nvar indexRouter = __webpack_require__(/*! ./routes/index */ \"./routes/index.js\");\n\nvar usersRouter = __webpack_require__(/*! ./routes/users */ \"./routes/users.js\");\n\nvar interviewRouter = __webpack_require__(/*! ./routes/interview */ \"./routes/interview.js\");\n\nvar app = express(); // view engine setup\n//app.set('views', path.join(__dirname, 'views'));\n//app.set('view engine', 'jade');\n//app.set('view engine', 'html');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(cookieParser());\napp.use(express[\"static\"](path.join(__dirname, 'public')));\napp.use(cors());\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/code', interviewRouter); // catch 404 and forward to error handler\n\napp.use(function (req, res, next) {\n  next(createError(404));\n}); // error handler\n\napp.use(function (err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {}; // render the error page\n\n  res.status(err.status || 500); //res.render('error');\n\n  res.json({\n    error: err\n  });\n});\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port); // const devServerEnabled = true;\n// if (devServerEnabled) {\n//     //reload=true:Enable auto reloading when changing JS files or content\n//     //timeout=1000:Time from disconnecting from server to reconnecting\n//     config.entry.app.unshift('webpack-hot-middleware/client?reload=true&timeout=1000');\n//     //Add HMR plugin\n//     config.plugins.push(new webpack.HotModuleReplacementPlugin());\n//     const compiler = webpack(config);\n//     //Enable \"webpack-dev-middleware\"\n//     app.use(webpackDevMiddleware(compiler, {\n//         publicPath: config.output.publicPath\n//     }));\n//     //Enable \"webpack-hot-middleware\"\n//     app.use(webpackHotMiddleware(compiler));\n// }\n\napp.use(express[\"static\"]('./public'));\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port; // handle specific listen errors with friendly messages\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n\n    default:\n      throw error;\n  }\n}\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\nmodule.exports = app;\n\n//# sourceURL=webpack://frontend/./app.js?");

/***/ }),

/***/ "./routes/index.js":
/*!*************************!*\
  !*** ./routes/index.js ***!
  \*************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 11:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\n\nvar router = express.Router();\n/* GET home page. */\n\nrouter.get('/', function (req, res, next) {\n  res.render('index', {\n    title: 'Express'\n  });\n});\nmodule.exports = router;\n\n//# sourceURL=webpack://frontend/./routes/index.js?");

/***/ }),

/***/ "./routes/interview.js":
/*!*****************************!*\
  !*** ./routes/interview.js ***!
  \*****************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 31:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\n\nvar router = express.Router();\n\nvar codeInterviewBundle = __webpack_require__(/*! ../src/res/code_interview */ \"./src/res/code_interview.js\");\n\nvar cors = __webpack_require__(/*! cors */ \"cors\");\n\nrouter.get('/', function (req, res, next) {\n  res.send('code interview questions');\n});\nrouter.get('/list', function (req, res, next) {});\nrouter.get('/test', function (req, res, next) {\n  codeInterviewBundle.test();\n  res.send('test');\n});\nrouter.get('/question/:questionId', cors(), function (req, res, next) {\n  console.log(req.params);\n\n  if (req.params.questionId != 1) {\n    res.json({\n      \"error\": \"no data\"\n    });\n  }\n\n  var data = {\n    question: \"implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?\"\n  };\n  res.json(data);\n});\nmodule.exports = router;\n\n//# sourceURL=webpack://frontend/./routes/interview.js?");

/***/ }),

/***/ "./routes/users.js":
/*!*************************!*\
  !*** ./routes/users.js ***!
  \*************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 9:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\n\nvar router = express.Router();\n/* GET users listing. */\n\nrouter.get('/', function (req, res, next) {\n  res.send('respond with a resource');\n});\nmodule.exports = router;\n\n//# sourceURL=webpack://frontend/./routes/users.js?");

/***/ }),

/***/ "./src/res/code_interview.js":
/*!***********************************!*\
  !*** ./src/res/code_interview.js ***!
  \***********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_exports__, module, top-level-this-exports, __webpack_require__ */
/*! CommonJS bailout: this is used directly at 11:3-7 */
/*! CommonJS bailout: exports is used directly at 10:58-65 */
/*! CommonJS bailout: module.exports is used directly at 10:116-130 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict'; // Current version.\n\n  var VERSION = '1.11.0'; // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n\n  var root = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && self.self === self && self || (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global.global === global && global || Function('return this')() || {}; // Save bytes in the minified (but not gzipped) version:\n\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null; // Create quick reference variables for speed access to core prototypes.\n\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty; // Modern feature detection.\n\n  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined'; // All **ECMAScript 5+** native function implementations that we hope to use\n  // are declared here.\n\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create,\n      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView; // Create references to these builtin functions because we override them.\n\n  var _isNaN = isNaN,\n      _isFinite = isFinite; // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n\n  var hasEnumBug = !{\n    toString: null\n  }.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // The largest integer that can be represented exactly.\n\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1; // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n\n  function restArguments(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function () {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n\n      switch (startIndex) {\n        case 0:\n          return func.call(this, rest);\n\n        case 1:\n          return func.call(this, arguments[0], rest);\n\n        case 2:\n          return func.call(this, arguments[0], arguments[1], rest);\n      }\n\n      var args = Array(startIndex + 1);\n\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  } // Is a given variable an object?\n\n\n  function isObject(obj) {\n    var type = _typeof(obj);\n\n    return type === 'function' || type === 'object' && !!obj;\n  } // Is a given value equal to null?\n\n\n  function isNull(obj) {\n    return obj === null;\n  } // Is a given variable undefined?\n\n\n  function isUndefined(obj) {\n    return obj === void 0;\n  } // Is a given value a boolean?\n\n\n  function isBoolean(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  } // Is a given value a DOM element?\n\n\n  function isElement(obj) {\n    return !!(obj && obj.nodeType === 1);\n  } // Internal function for creating a `toString`-based type tester.\n\n\n  function tagTester(name) {\n    return function (obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  }\n\n  var isString = tagTester('String');\n  var isNumber = tagTester('Number');\n  var isDate = tagTester('Date');\n  var isRegExp = tagTester('RegExp');\n  var isError = tagTester('Error');\n  var isSymbol = tagTester('Symbol');\n  var isMap = tagTester('Map');\n  var isWeakMap = tagTester('WeakMap');\n  var isSet = tagTester('Set');\n  var isWeakSet = tagTester('WeakSet');\n  var isArrayBuffer = tagTester('ArrayBuffer');\n  var isDataView = tagTester('DataView'); // Is a given value an array?\n  // Delegates to ECMA5's native `Array.isArray`.\n\n  var isArray = nativeIsArray || tagTester('Array');\n  var isFunction = tagTester('Function'); // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n\n  var nodelist = root.document && root.document.childNodes;\n\n  if ( true && (typeof Int8Array === \"undefined\" ? \"undefined\" : _typeof(Int8Array)) != 'object' && typeof nodelist != 'function') {\n    isFunction = function isFunction(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  var isFunction$1 = isFunction; // Internal function to check whether `key` is an own property name of `obj`.\n\n  function has(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  }\n\n  var isArguments = tagTester('Arguments'); // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n\n  (function () {\n    if (!isArguments(arguments)) {\n      isArguments = function isArguments(obj) {\n        return has(obj, 'callee');\n      };\n    }\n  })();\n\n  var isArguments$1 = isArguments; // Is a given object a finite number?\n\n  function isFinite$1(obj) {\n    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n  } // Is the given value `NaN`?\n\n\n  function isNaN$1(obj) {\n    return isNumber(obj) && _isNaN(obj);\n  } // Predicate-generating function. Often useful outside of Underscore.\n\n\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  } // Common internal logic for `isArrayLike` and `isBufferLike`.\n\n\n  function createSizePropertyCheck(getSizeProperty) {\n    return function (collection) {\n      var sizeProperty = getSizeProperty(collection);\n      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n    };\n  } // Internal helper to generate a function to obtain property `key` from `obj`.\n\n\n  function shallowProperty(key) {\n    return function (obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  } // Internal helper to obtain the `byteLength` property of an object.\n\n\n  var getByteLength = shallowProperty('byteLength'); // Internal helper to determine whether we should spend extensive checks against\n  // `ArrayBuffer` et al.\n\n  var isBufferLike = createSizePropertyCheck(getByteLength); // Is a given value a typed array?\n\n  var typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\n\n  function isTypedArray(obj) {\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n    // Otherwise, fall back on the above regular expression.\n    return nativeIsView ? nativeIsView(obj) && !isDataView(obj) : isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n  }\n\n  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false); // Internal helper to obtain the `length` property of an object.\n\n  var getLength = shallowProperty('length'); // Internal helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n\n  var isArrayLike = createSizePropertyCheck(getLength); // Internal helper to create a simple lookup structure.\n  // `collectNonEnumProps` used to depend on `_.contains`, but this led to\n  // circular imports. `emulatedSet` is a one-off solution that only works for\n  // arrays of strings.\n\n  function emulatedSet(keys) {\n    var hash = {};\n\n    for (var l = keys.length, i = 0; i < l; ++i) {\n      hash[keys[i]] = true;\n    }\n\n    return {\n      contains: function contains(key) {\n        return hash[key];\n      },\n      push: function push(key) {\n        hash[key] = true;\n        return keys.push(key);\n      }\n    };\n  } // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n  // needed.\n\n\n  function collectNonEnumProps(obj, keys) {\n    keys = emulatedSet(keys);\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = isFunction$1(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n    var prop = 'constructor';\n    if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n\n      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n        keys.push(prop);\n      }\n    }\n  } // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n\n\n  function keys(obj) {\n    if (!isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n\n    for (var key in obj) {\n      if (has(obj, key)) keys.push(key);\n    } // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  } // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n\n\n  function isEmpty(obj) {\n    if (obj == null) return true; // Skip the more expensive `toString`-based type checks if `obj` has no\n    // `.length`.\n\n    if (isArrayLike(obj) && (isArray(obj) || isString(obj) || isArguments$1(obj))) return obj.length === 0;\n    return keys(obj).length === 0;\n  } // Returns whether an object has a given set of `key:value` pairs.\n\n\n  function isMatch(object, attrs) {\n    var _keys = keys(attrs),\n        length = _keys.length;\n\n    if (object == null) return !length;\n    var obj = Object(object);\n\n    for (var i = 0; i < length; i++) {\n      var key = _keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n\n    return true;\n  } // If Underscore is called as a function, it returns a wrapped object that can\n  // be used OO-style. This wrapper holds altered versions of all functions added\n  // through `_.mixin`. Wrapped objects may be chained.\n\n\n  function _(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  }\n\n  _.VERSION = VERSION; // Extracts the result from a wrapped and chained object.\n\n  _.prototype.value = function () {\n    return this._wrapped;\n  }; // Provide unwrapping proxies for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n\n\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function () {\n    return String(this._wrapped);\n  }; // Internal recursive comparison function for `_.isEqual`.\n\n\n  function eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n    if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n    if (a !== a) return b !== b; // Exhaust primitive checks\n\n    var type = _typeof(a);\n\n    if (type !== 'function' && type !== 'object' && _typeof(b) != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  } // Internal recursive comparison function for `_.isEqual`.\n\n\n  function deepEq(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n      // These types are compared by value.\n      case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n\n      case '[object ArrayBuffer]':\n        // Coerce to `DataView` so we can fall through to the next case.\n        return deepEq(new DataView(a), new DataView(b), aStack, bStack);\n\n      case '[object DataView]':\n        var byteLength = getByteLength(a);\n\n        if (byteLength !== getByteLength(b)) {\n          return false;\n        }\n\n        while (byteLength--) {\n          if (a.getUint8(byteLength) !== b.getUint8(byteLength)) {\n            return false;\n          }\n        }\n\n        return true;\n    }\n\n    if (isTypedArray$1(a)) {\n      // Coerce typed arrays to `DataView`.\n      return deepEq(new DataView(a.buffer), new DataView(b.buffer), aStack, bStack);\n    }\n\n    var areArrays = className === '[object Array]';\n\n    if (!areArrays) {\n      if (_typeof(a) != 'object' || _typeof(b) != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n\n      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n        return false;\n      }\n    } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    } // Add the first object to the stack of traversed objects.\n\n\n    aStack.push(a);\n    bStack.push(b); // Recursively compare objects and arrays.\n\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var _keys = keys(a),\n          key;\n\n      length = _keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n      if (keys(b).length !== length) return false;\n\n      while (length--) {\n        // Deep compare each member\n        key = _keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    } // Remove the first object from the stack of traversed objects.\n\n\n    aStack.pop();\n    bStack.pop();\n    return true;\n  } // Perform a deep comparison to check if two objects are equal.\n\n\n  function isEqual(a, b) {\n    return eq(a, b);\n  } // Retrieve all the enumerable property names of an object.\n\n\n  function allKeys(obj) {\n    if (!isObject(obj)) return [];\n    var keys = [];\n\n    for (var key in obj) {\n      keys.push(key);\n    } // Ahem, IE < 9.\n\n\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  } // Retrieve the values of an object's properties.\n\n\n  function values(obj) {\n    var _keys = keys(obj);\n\n    var length = _keys.length;\n    var values = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[_keys[i]];\n    }\n\n    return values;\n  } // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of `_.object` with one argument.\n\n\n  function pairs(obj) {\n    var _keys = keys(obj);\n\n    var length = _keys.length;\n    var pairs = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [_keys[i], obj[_keys[i]]];\n    }\n\n    return pairs;\n  } // Invert the keys and values of an object. The values must be serializable.\n\n\n  function invert(obj) {\n    var result = {};\n\n    var _keys = keys(obj);\n\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      result[obj[_keys[i]]] = _keys[i];\n    }\n\n    return result;\n  } // Return a sorted list of the function names available on the object.\n\n\n  function functions(obj) {\n    var names = [];\n\n    for (var key in obj) {\n      if (isFunction$1(obj[key])) names.push(key);\n    }\n\n    return names.sort();\n  } // An internal function for creating assigner functions.\n\n\n  function createAssigner(keysFunc, defaults) {\n    return function (obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n\n      return obj;\n    };\n  } // Extend a given object with all the properties in passed-in object(s).\n\n\n  var extend = createAssigner(allKeys); // Assigns a given object with all the own properties in the passed-in\n  // object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n  var extendOwn = createAssigner(keys); // Fill in a given object with default properties.\n\n  var defaults = createAssigner(allKeys, true); // Create a naked function reference for surrogate-prototype-swapping.\n\n  function ctor() {\n    return function () {};\n  } // An internal function for creating a new object that inherits from another.\n\n\n  function baseCreate(prototype) {\n    if (!isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    var Ctor = ctor();\n    Ctor.prototype = prototype;\n    var result = new Ctor();\n    Ctor.prototype = null;\n    return result;\n  } // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n\n\n  function create(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) extendOwn(result, props);\n    return result;\n  } // Create a (shallow-cloned) duplicate of an object.\n\n\n  function clone(obj) {\n    if (!isObject(obj)) return obj;\n    return isArray(obj) ? obj.slice() : extend({}, obj);\n  } // Invokes `interceptor` with the `obj` and then returns `obj`.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n\n\n  function tap(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  } // Shortcut function for checking if an object has a given property directly on\n  // itself (in other words, not on a prototype). Unlike the internal `has`\n  // function, this public version can also traverse nested properties.\n\n\n  function has$1(obj, path) {\n    if (!isArray(path)) {\n      return has(obj, path);\n    }\n\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n\n      obj = obj[key];\n    }\n\n    return !!length;\n  } // Keep the identity function around for default iteratees.\n\n\n  function identity(value) {\n    return value;\n  } // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n\n\n  function matcher(attrs) {\n    attrs = extendOwn({}, attrs);\n    return function (obj) {\n      return isMatch(obj, attrs);\n    };\n  } // Internal function to obtain a nested property in `obj` along `path`.\n\n\n  function deepGet(obj, path) {\n    var length = path.length;\n\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n\n    return length ? obj : void 0;\n  } // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indices.\n\n\n  function property(path) {\n    if (!isArray(path)) {\n      return shallowProperty(path);\n    }\n\n    return function (obj) {\n      return deepGet(obj, path);\n    };\n  } // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n\n\n  function optimizeCb(func, context, argCount) {\n    if (context === void 0) return func;\n\n    switch (argCount == null ? 3 : argCount) {\n      case 1:\n        return function (value) {\n          return func.call(context, value);\n        };\n      // The 2-argument case is omitted because we’re not using it.\n\n      case 3:\n        return function (value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n\n      case 4:\n        return function (accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n\n    return function () {\n      return func.apply(context, arguments);\n    };\n  } // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `_.identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n\n\n  function baseIteratee(value, context, argCount) {\n    if (value == null) return identity;\n    if (isFunction$1(value)) return optimizeCb(value, context, argCount);\n    if (isObject(value) && !isArray(value)) return matcher(value);\n    return property(value);\n  } // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only `argCount` argument.\n\n\n  function iteratee(value, context) {\n    return baseIteratee(value, context, Infinity);\n  }\n\n  _.iteratee = iteratee; // The function we call internally to generate a callback. It invokes\n  // `_.iteratee` if overridden, otherwise `baseIteratee`.\n\n  function cb(value, context, argCount) {\n    if (_.iteratee !== iteratee) return _.iteratee(value, context);\n    return baseIteratee(value, context, argCount);\n  } // Returns the results of applying the `iteratee` to each element of `obj`.\n  // In contrast to `_.map` it returns an object.\n\n\n  function mapObject(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var _keys = keys(obj),\n        length = _keys.length,\n        results = {};\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  } // Predicate-generating function. Often useful outside of Underscore.\n\n\n  function noop() {} // Generates a function for a given object that returns a given property.\n\n\n  function propertyOf(obj) {\n    if (obj == null) {\n      return function () {};\n    }\n\n    return function (path) {\n      return !isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  } // Run a function **n** times.\n\n\n  function times(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n\n    for (var i = 0; i < n; i++) {\n      accum[i] = iteratee(i);\n    }\n\n    return accum;\n  } // Return a random integer between `min` and `max` (inclusive).\n\n\n  function random(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    return min + Math.floor(Math.random() * (max - min + 1));\n  } // A (possibly faster) way to get the current timestamp as an integer.\n\n\n  var now = Date.now || function () {\n    return new Date().getTime();\n  }; // Internal helper to generate functions for escaping and unescaping strings\n  // to/from HTML interpolation.\n\n\n  function createEscaper(map) {\n    var escaper = function escaper(match) {\n      return map[match];\n    }; // Regexes for identifying a key that needs to be escaped.\n\n\n    var source = '(?:' + keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function (string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  } // Internal list of HTML entities for escaping.\n\n\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  }; // Function for escaping strings to HTML interpolation.\n\n  var _escape = createEscaper(escapeMap); // Internal list of HTML entities for unescaping.\n\n\n  var unescapeMap = invert(escapeMap); // Function for unescaping strings from HTML interpolation.\n\n  var _unescape = createEscaper(unescapeMap); // By default, Underscore uses ERB-style template delimiters. Change the\n  // following template settings to use alternative delimiters.\n\n\n  var templateSettings = _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  }; // When customizing `_.templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n\n  var noMatch = /(.)^/; // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    \"\\u2028\": 'u2028',\n    \"\\u2029\": 'u2029'\n  };\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  function escapeChar(match) {\n    return '\\\\' + escapes[match];\n  } // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n\n\n  function template(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = defaults({}, settings, _.templateSettings); // Combine delimiters into one regular expression via alternation.\n\n    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g'); // Compile the template source, escaping string literals appropriately.\n\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      } // Adobe VMs need the match returned to produce the correct offset.\n\n\n      return match;\n    });\n    source += \"';\\n\"; // If a variable is not specified, place data values in local scope.\n\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n    source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n    var render;\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function template(data) {\n      return render.call(this, data, _);\n    }; // Provide the compiled source as a convenience for precompilation.\n\n\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n    return template;\n  } // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n\n\n  function result(obj, path, fallback) {\n    if (!isArray(path)) path = [path];\n    var length = path.length;\n\n    if (!length) {\n      return isFunction$1(fallback) ? fallback.call(obj) : fallback;\n    }\n\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n\n      obj = isFunction$1(prop) ? prop.call(obj) : prop;\n    }\n\n    return obj;\n  } // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n\n\n  var idCounter = 0;\n\n  function uniqueId(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  } // Start chaining a wrapped Underscore object.\n\n\n  function chain(obj) {\n    var instance = _(obj);\n\n    instance._chain = true;\n    return instance;\n  } // Internal function to execute `sourceFunc` bound to `context` with optional\n  // `args`. Determines whether to execute a function as a constructor or as a\n  // normal function.\n\n\n  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (isObject(result)) return result;\n    return self;\n  } // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. `_` acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n\n\n  var partial = restArguments(function (func, boundArgs) {\n    var placeholder = partial.placeholder;\n\n    var bound = function bound() {\n      var position = 0,\n          length = boundArgs.length;\n      var args = Array(length);\n\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n\n      while (position < arguments.length) {\n        args.push(arguments[position++]);\n      }\n\n      return executeBound(func, bound, this, this, args);\n    };\n\n    return bound;\n  });\n  partial.placeholder = _; // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally).\n\n  var bind = restArguments(function (func, context, args) {\n    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function (callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  }); // Internal implementation of a recursive `flatten` function.\n\n  function flatten(input, depth, strict, output) {\n    output = output || [];\n\n    if (!depth && depth !== 0) {\n      depth = Infinity;\n    } else if (depth <= 0) {\n      return output.concat(input);\n    }\n\n    var idx = output.length;\n\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n\n      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\n        // Flatten current level of array or arguments object.\n        if (depth > 1) {\n          flatten(value, depth - 1, strict, output);\n          idx = output.length;\n        } else {\n          var j = 0,\n              len = value.length;\n\n          while (j < len) {\n            output[idx++] = value[j++];\n          }\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n\n    return output;\n  } // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n\n\n  var bindAll = restArguments(function (obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n\n    while (index--) {\n      var key = keys[index];\n      obj[key] = bind(obj[key], obj);\n    }\n\n    return obj;\n  }); // Memoize an expensive function by storing its results.\n\n  function memoize(func, hasher) {\n    var memoize = function memoize(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n\n    memoize.cache = {};\n    return memoize;\n  } // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n\n\n  var delay = restArguments(function (func, wait, args) {\n    return setTimeout(function () {\n      return func.apply(null, args);\n    }, wait);\n  }); // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n\n  var defer = partial(delay, _, 1); // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n\n  function throttle(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function later() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function throttled() {\n      var _now = now();\n\n      if (!previous && options.leading === false) previous = _now;\n      var remaining = wait - (_now - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = _now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  } // When a sequence of calls of the returned function ends, the argument\n  // function is triggered. The end of a sequence is defined by the `wait`\n  // parameter. If `immediate` is passed, the argument function will be\n  // triggered at the beginning of the sequence instead of at the end.\n\n\n  function debounce(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function later(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function (args) {\n      if (timeout) clearTimeout(timeout);\n\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function () {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  } // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n\n\n  function wrap(func, wrapper) {\n    return partial(wrapper, func);\n  } // Returns a negated version of the passed-in predicate.\n\n\n  function negate(predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  } // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n\n\n  function compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n\n      while (i--) {\n        result = args[i].call(this, result);\n      }\n\n      return result;\n    };\n  } // Returns a function that will only be executed on and after the Nth call.\n\n\n  function after(times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  } // Returns a function that will only be executed up to (but not including) the\n  // Nth call.\n\n\n  function before(times, func) {\n    var memo;\n    return function () {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n\n      if (times <= 1) func = null;\n      return memo;\n    };\n  } // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n\n\n  var once = partial(before, 2); // Returns the first key on an object that passes a truth test.\n\n  function findKey(obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var _keys = keys(obj),\n        key;\n\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      key = _keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  } // Internal function to generate `_.findIndex` and `_.findLastIndex`.\n\n\n  function createPredicateIndexFinder(dir) {\n    return function (array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n\n      return -1;\n    };\n  } // Returns the first index on an array-like that passes a truth test.\n\n\n  var findIndex = createPredicateIndexFinder(1); // Returns the last index on an array-like that passes a truth test.\n\n  var findLastIndex = createPredicateIndexFinder(-1); // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n\n  function sortedIndex(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0,\n        high = getLength(array);\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n    }\n\n    return low;\n  } // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\n\n\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function (array, item, idx) {\n      var i = 0,\n          length = getLength(array);\n\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), isNaN$1);\n        return idx >= 0 ? idx + i : -1;\n      }\n\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n\n      return -1;\n    };\n  } // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n\n\n  var indexOf = createIndexFinder(1, findIndex, sortedIndex); // Return the position of the last occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n\n  var lastIndexOf = createIndexFinder(-1, findLastIndex); // Return the first value which passes a truth test.\n\n  function find(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  } // Convenience version of a common use case of `_.find`: getting the first\n  // object containing specific `key:value` pairs.\n\n\n  function findWhere(obj, attrs) {\n    return find(obj, matcher(attrs));\n  } // The cornerstone for collection functions, an `each`\n  // implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n\n\n  function each(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var _keys = keys(obj);\n\n      for (i = 0, length = _keys.length; i < length; i++) {\n        iteratee(obj[_keys[i]], _keys[i], obj);\n      }\n    }\n\n    return obj;\n  } // Return the results of applying the iteratee to each element.\n\n\n  function map(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        results = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n\n    return results;\n  } // Internal helper to create a reducing function, iterating left or right.\n\n\n  function createReduce(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function reducer(obj, iteratee, memo, initial) {\n      var _keys = !isArrayLike(obj) && keys(obj),\n          length = (_keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n\n      if (!initial) {\n        memo = obj[_keys ? _keys[index] : index];\n        index += dir;\n      }\n\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = _keys ? _keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n\n      return memo;\n    };\n\n    return function (obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  } // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n\n\n  var reduce = createReduce(1); // The right-associative version of reduce, also known as `foldr`.\n\n  var reduceRight = createReduce(-1); // Return all the elements that pass a truth test.\n\n  function filter(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    each(obj, function (value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  } // Return all the elements for which a truth test fails.\n\n\n  function reject(obj, predicate, context) {\n    return filter(obj, negate(cb(predicate)), context);\n  } // Determine whether all of the elements pass a truth test.\n\n\n  function every(obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n\n    return true;\n  } // Determine if at least one element in the object passes a truth test.\n\n\n  function some(obj, predicate, context) {\n    predicate = cb(predicate, context);\n\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n\n    return false;\n  } // Determine if the array or object contains a given item (using `===`).\n\n\n  function contains(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return indexOf(obj, item, fromIndex) >= 0;\n  } // Invoke a method (with arguments) on every item in a collection.\n\n\n  var invoke = restArguments(function (obj, path, args) {\n    var contextPath, func;\n\n    if (isFunction$1(path)) {\n      func = path;\n    } else if (isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n\n    return map(obj, function (context) {\n      var method = func;\n\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n\n        if (context == null) return void 0;\n        method = context[path];\n      }\n\n      return method == null ? method : method.apply(context, args);\n    });\n  }); // Convenience version of a common use case of `_.map`: fetching a property.\n\n  function pluck(obj, key) {\n    return map(obj, property(key));\n  } // Convenience version of a common use case of `_.filter`: selecting only\n  // objects containing specific `key:value` pairs.\n\n\n  function where(obj, attrs) {\n    return filter(obj, matcher(attrs));\n  } // Return the maximum element (or element-based computation).\n\n\n  function max(obj, iteratee, context) {\n    var result = -Infinity,\n        lastComputed = -Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  } // Return the minimum element (or element-based computation).\n\n\n  function min(obj, iteratee, context) {\n    var result = Infinity,\n        lastComputed = Infinity,\n        value,\n        computed;\n\n    if (iteratee == null || typeof iteratee == 'number' && _typeof(obj[0]) != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function (v, index, list) {\n        computed = iteratee(v, index, list);\n\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n\n    return result;\n  } // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `_.map`.\n\n\n  function sample(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = values(obj);\n      return obj[random(obj.length - 1)];\n    }\n\n    var sample = isArrayLike(obj) ? clone(obj) : values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n\n    for (var index = 0; index < n; index++) {\n      var rand = random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n\n    return sample.slice(0, n);\n  } // Shuffle a collection.\n\n\n  function shuffle(obj) {\n    return sample(obj, Infinity);\n  } // Sort the object's values by a criterion produced by an iteratee.\n\n\n  function sortBy(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return pluck(map(obj, function (value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n\n      return left.index - right.index;\n    }), 'value');\n  } // An internal function used for aggregate \"group by\" operations.\n\n\n  function group(behavior, partition) {\n    return function (obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      each(obj, function (value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  } // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n\n\n  var groupBy = group(function (result, value, key) {\n    if (has(result, key)) result[key].push(value);else result[key] = [value];\n  }); // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n  // when you know that your index values will be unique.\n\n  var indexBy = group(function (result, value, key) {\n    result[key] = value;\n  }); // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n\n  var countBy = group(function (result, value, key) {\n    if (has(result, key)) result[key]++;else result[key] = 1;\n  }); // Split a collection into two arrays: one whose elements all pass the given\n  // truth test, and one whose elements all do not pass the truth test.\n\n  var partition = group(function (result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true); // Safely create a real, live array from anything iterable.\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n\n  function toArray(obj) {\n    if (!obj) return [];\n    if (isArray(obj)) return slice.call(obj);\n\n    if (isString(obj)) {\n      // Keep surrogate pair characters together.\n      return obj.match(reStrSymbol);\n    }\n\n    if (isArrayLike(obj)) return map(obj, identity);\n    return values(obj);\n  } // Return the number of elements in a collection.\n\n\n  function size(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : keys(obj).length;\n  } // Internal `_.pick` helper function to determine whether `key` is an enumerable\n  // property name of `obj`.\n\n\n  function keyInObj(value, key, obj) {\n    return key in obj;\n  } // Return a copy of the object only containing the allowed properties.\n\n\n  var pick = restArguments(function (obj, keys) {\n    var result = {},\n        iteratee = keys[0];\n    if (obj == null) return result;\n\n    if (isFunction$1(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n\n    return result;\n  }); // Return a copy of the object without the disallowed properties.\n\n  var omit = restArguments(function (obj, keys) {\n    var iteratee = keys[0],\n        context;\n\n    if (isFunction$1(iteratee)) {\n      iteratee = negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = map(flatten(keys, false, false), String);\n\n      iteratee = function iteratee(value, key) {\n        return !contains(keys, key);\n      };\n    }\n\n    return pick(obj, iteratee, context);\n  }); // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n\n  function initial(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  } // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n\n\n  function first(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return initial(array, array.length - n);\n  } // Returns everything but the first entry of the `array`. Especially useful on\n  // the `arguments` object. Passing an **n** will return the rest N values in the\n  // `array`.\n\n\n  function rest(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  } // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n\n\n  function last(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return rest(array, Math.max(0, array.length - n));\n  } // Trim out all falsy values from an array.\n\n\n  function compact(array) {\n    return filter(array, Boolean);\n  } // Flatten out an array, either recursively (by default), or up to `depth`.\n  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\n\n\n  function flatten$1(array, depth) {\n    return flatten(array, depth, false);\n  } // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n\n\n  var difference = restArguments(function (array, rest) {\n    rest = flatten(rest, true, true);\n    return filter(array, function (value) {\n      return !contains(rest, value);\n    });\n  }); // Return a version of the array that does not contain the specified value(s).\n\n  var without = restArguments(function (array, otherArrays) {\n    return difference(array, otherArrays);\n  }); // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n\n  function uniq(array, isSorted, iteratee, context) {\n    if (!isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!contains(result, value)) {\n        result.push(value);\n      }\n    }\n\n    return result;\n  } // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n\n\n  var union = restArguments(function (arrays) {\n    return uniq(flatten(arrays, true, true));\n  }); // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n\n  function intersection(array) {\n    var result = [];\n    var argsLength = arguments.length;\n\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (contains(result, item)) continue;\n      var j;\n\n      for (j = 1; j < argsLength; j++) {\n        if (!contains(arguments[j], item)) break;\n      }\n\n      if (j === argsLength) result.push(item);\n    }\n\n    return result;\n  } // Complement of zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n\n\n  function unzip(array) {\n    var length = array && max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = pluck(array, index);\n    }\n\n    return result;\n  } // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n\n\n  var zip = restArguments(unzip); // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.\n\n  function object(list, values) {\n    var result = {};\n\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n\n    return result;\n  } // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](https://docs.python.org/library/functions.html#range).\n\n\n  function range(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  } // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n\n\n  function chunk(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0,\n        length = array.length;\n\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n\n    return result;\n  } // Helper function to continue chaining intermediate results.\n\n\n  function chainResult(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  } // Add your own custom functions to the Underscore object.\n\n\n  function mixin(obj) {\n    each(functions(obj), function (name) {\n      var func = _[name] = obj[name];\n\n      _.prototype[name] = function () {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  } // Add all mutator `Array` functions to the wrapper.\n\n\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n\n      if (obj != null) {\n        method.apply(obj, arguments);\n\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n          delete obj[0];\n        }\n      }\n\n      return chainResult(this, obj);\n    };\n  }); // Add all accessor `Array` functions to the wrapper.\n\n  each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n      if (obj != null) obj = method.apply(obj, arguments);\n      return chainResult(this, obj);\n    };\n  }); // Named Exports\n\n  var allExports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    VERSION: VERSION,\n    restArguments: restArguments,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isBoolean: isBoolean,\n    isElement: isElement,\n    isString: isString,\n    isNumber: isNumber,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isError: isError,\n    isSymbol: isSymbol,\n    isMap: isMap,\n    isWeakMap: isWeakMap,\n    isSet: isSet,\n    isWeakSet: isWeakSet,\n    isArrayBuffer: isArrayBuffer,\n    isDataView: isDataView,\n    isArray: isArray,\n    isFunction: isFunction$1,\n    isArguments: isArguments$1,\n    isFinite: isFinite$1,\n    isNaN: isNaN$1,\n    isTypedArray: isTypedArray$1,\n    isEmpty: isEmpty,\n    isMatch: isMatch,\n    isEqual: isEqual,\n    keys: keys,\n    allKeys: allKeys,\n    values: values,\n    pairs: pairs,\n    invert: invert,\n    functions: functions,\n    methods: functions,\n    extend: extend,\n    extendOwn: extendOwn,\n    assign: extendOwn,\n    defaults: defaults,\n    create: create,\n    clone: clone,\n    tap: tap,\n    has: has$1,\n    mapObject: mapObject,\n    identity: identity,\n    constant: constant,\n    noop: noop,\n    property: property,\n    propertyOf: propertyOf,\n    matcher: matcher,\n    matches: matcher,\n    times: times,\n    random: random,\n    now: now,\n    escape: _escape,\n    unescape: _unescape,\n    templateSettings: templateSettings,\n    template: template,\n    result: result,\n    uniqueId: uniqueId,\n    chain: chain,\n    iteratee: iteratee,\n    partial: partial,\n    bind: bind,\n    bindAll: bindAll,\n    memoize: memoize,\n    delay: delay,\n    defer: defer,\n    throttle: throttle,\n    debounce: debounce,\n    wrap: wrap,\n    negate: negate,\n    compose: compose,\n    after: after,\n    before: before,\n    once: once,\n    findKey: findKey,\n    findIndex: findIndex,\n    findLastIndex: findLastIndex,\n    sortedIndex: sortedIndex,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    find: find,\n    detect: find,\n    findWhere: findWhere,\n    each: each,\n    forEach: each,\n    map: map,\n    collect: map,\n    reduce: reduce,\n    foldl: reduce,\n    inject: reduce,\n    reduceRight: reduceRight,\n    foldr: reduceRight,\n    filter: filter,\n    select: filter,\n    reject: reject,\n    every: every,\n    all: every,\n    some: some,\n    any: some,\n    contains: contains,\n    includes: contains,\n    include: contains,\n    invoke: invoke,\n    pluck: pluck,\n    where: where,\n    max: max,\n    min: min,\n    shuffle: shuffle,\n    sample: sample,\n    sortBy: sortBy,\n    groupBy: groupBy,\n    indexBy: indexBy,\n    countBy: countBy,\n    partition: partition,\n    toArray: toArray,\n    size: size,\n    pick: pick,\n    omit: omit,\n    first: first,\n    head: first,\n    take: first,\n    initial: initial,\n    last: last,\n    rest: rest,\n    tail: rest,\n    drop: rest,\n    compact: compact,\n    flatten: flatten$1,\n    without: without,\n    uniq: uniq,\n    unique: uniq,\n    union: union,\n    intersection: intersection,\n    difference: difference,\n    unzip: unzip,\n    transpose: unzip,\n    zip: zip,\n    object: object,\n    range: range,\n    chunk: chunk,\n    mixin: mixin,\n    'default': _\n  }); // Default Export\n  // Add all of the Underscore functions to the wrapper object.\n\n  var _$1 = mixin(allExports); // Legacy Node.js API.\n\n\n  _$1._ = _$1;\n\n  var DataStructure = /*#__PURE__*/function () {\n    function DataStructure() {\n      _classCallCheck(this, DataStructure);\n    }\n\n    _createClass(DataStructure, [{\n      key: \"IsUnique_1_1\",\n      value: function IsUnique_1_1(str) {\n        //implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?\n        var hash_table = [];\n\n        for (var i = str.length - 1; i >= 0; i--) {\n          if (!hash_table[str[i]]) {\n            hash_table[str[i]] = 1;\n          } else {\n            hash_table[str[i]] += 1;\n          }\n\n          if (hash_table[str[i]] > 1) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }, {\n      key: \"CheckPermutation_1_2\",\n      value: function CheckPermutation_1_2(str1, str2) {\n        //1.2 given two strings, write a method to decide if one is a permutation of the other.\n        var hash1 = [],\n            hash2 = [];\n\n        if (str1.length != str2.length) {\n          return false;\n        }\n\n        for (var i = str1.length - 1; i >= 0; i--) {\n          if (!hash1[str(str1[i])]) {\n            hash1[str(str1[i])] = 1;\n          } else {\n            hash1[str(str1[i])] += 1;\n          }\n        }\n\n        for (var i = str2.length - 1; i >= 0; i--) {\n          if (!hash2[str(str2[i])]) {\n            hash2[str(str2[i])] = 1;\n          } else {\n            hash2[str(str2[i])] += 1;\n          }\n        }\n\n        console.debug(hash1);\n        console.debug(hash2);\n        return _$1.isEqual(hash1, hash2);\n      }\n    }, {\n      key: \"URLify_1_3\",\n      value: function URLify_1_3(str) {//1.3 write a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters, and that you are given the \"true\" length of the string. (Note: if implementing in Java, please use a character array so that you can perform this operation in place)\n      }\n    }, {\n      key: \"PalindromePermutation_1_4\",\n      value: function PalindromePermutation_1_4(str) {//1.4 Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or pharse that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n      }\n    }, {\n      key: \"OneAway_1_5\",\n      value: function OneAway_1_5(str1, str2) {//1.5 There are three types of edits that can be performed on strings: insert a character, remove a character, or replace a character. Given two strings, write a function to check if they are one edit away\n      }\n    }, {\n      key: \"StringCompression_1_6\",\n      value: function StringCompression_1_6(str) {//1.6 Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the compressed string would not become smaller than the original string. your method should return the original string. You can assume the string has only uppercase and lowercase letters.\n      }\n    }]);\n\n    return DataStructure;\n  }();\n\n  function test() {\n    console.log(\"test\");\n  }\n\n  var index = {\n    DataStructure: DataStructure,\n    test: test\n  };\n  return index;\n});\n\n//# sourceURL=webpack://frontend/./src/res/code_interview.js?");

/***/ }),

/***/ "./webpack.config.js":
/*!***************************!*\
  !*** ./webpack.config.js ***!
  \***************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__ */
/*! CommonJS bailout: module.exports is used directly at 9:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\n\nvar webpack = __webpack_require__(/*! webpack */ \"webpack\");\n\nvar nodeExternals = __webpack_require__(/*! webpack-node-externals */ \"webpack-node-externals\");\n\nvar HtmlWebPackPlugin = __webpack_require__(/*! html-webpack-plugin */ \"html-webpack-plugin\");\n\nmodule.exports = {\n  mode: 'development',\n  devServer: {\n    contentBase: path.join(__dirname, 'public'),\n    port: 8080,\n    host: \"localhost\"\n  },\n  entry: {\n    server: './app.js'\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    publicPath: '/',\n    filename: 'server.js'\n  },\n  target: 'node',\n  node: {\n    // Need this when working with express, otherwise the build fails\n    __dirname: false,\n    // if you don't put this is, __dirname\n    __filename: false // and __filename return blank or /\n\n  },\n  externals: [nodeExternals()],\n  // Need this to avoid error when working with Express\n  module: {\n    rules: [{\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      use: {\n        loader: \"babel-loader\"\n      }\n    }, {\n      test: /\\.html$/,\n      use: [{\n        loader: \"html-loader\"\n      }]\n    }]\n  },\n  plugins: [// new HtmlWebPackPlugin({\n    //   template: \"./src/index.html\",\n    //   filename: \"./index.html\"\n    // })\n  ]\n};\n\n//# sourceURL=webpack://frontend/./webpack.config.js?");

/***/ }),

/***/ "cookie-parser":
/*!********************************!*\
  !*** external "cookie-parser" ***!
  \********************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"cookie-parser\");;\n\n//# sourceURL=webpack://frontend/external_%22cookie-parser%22?");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"cors\");;\n\n//# sourceURL=webpack://frontend/external_%22cors%22?");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"debug\");;\n\n//# sourceURL=webpack://frontend/external_%22debug%22?");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"express\");;\n\n//# sourceURL=webpack://frontend/external_%22express%22?");

/***/ }),

/***/ "html-webpack-plugin":
/*!**************************************!*\
  !*** external "html-webpack-plugin" ***!
  \**************************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"html-webpack-plugin\");;\n\n//# sourceURL=webpack://frontend/external_%22html-webpack-plugin%22?");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"http\");;\n\n//# sourceURL=webpack://frontend/external_%22http%22?");

/***/ }),

/***/ "http-errors":
/*!******************************!*\
  !*** external "http-errors" ***!
  \******************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"http-errors\");;\n\n//# sourceURL=webpack://frontend/external_%22http-errors%22?");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"morgan\");;\n\n//# sourceURL=webpack://frontend/external_%22morgan%22?");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"path\");;\n\n//# sourceURL=webpack://frontend/external_%22path%22?");

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"webpack\");;\n\n//# sourceURL=webpack://frontend/external_%22webpack%22?");

/***/ }),

/***/ "webpack-dev-middleware":
/*!*****************************************!*\
  !*** external "webpack-dev-middleware" ***!
  \*****************************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"webpack-dev-middleware\");;\n\n//# sourceURL=webpack://frontend/external_%22webpack-dev-middleware%22?");

/***/ }),

/***/ "webpack-hot-middleware":
/*!*****************************************!*\
  !*** external "webpack-hot-middleware" ***!
  \*****************************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"webpack-hot-middleware\");;\n\n//# sourceURL=webpack://frontend/external_%22webpack-hot-middleware%22?");

/***/ }),

/***/ "webpack-node-externals":
/*!*****************************************!*\
  !*** external "webpack-node-externals" ***!
  \*****************************************/
/*! dynamic exports */
/*! exports [maybe provided (runtime-defined)] [no usage info] */
/*! runtime requirements: module */
/***/ ((module) => {

"use strict";
eval("module.exports = require(\"webpack-node-externals\");;\n\n//# sourceURL=webpack://frontend/external_%22webpack-node-externals%22?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./app.js");
/******/ })()
;